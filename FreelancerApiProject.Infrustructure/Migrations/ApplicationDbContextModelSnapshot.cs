// <auto-generated />
using System;
using FreelancerApiProject.Infrustructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreelancerApiProject.Infrustructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique()
                        .HasFilter("[AdminId] IS NOT NULL");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("FreelancerId")
                        .IsUnique()
                        .HasFilter("[FreelancerId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "خدمات تصميم شعارات وبوسترات وغيرها",
                            Title = "تصميم جرافيك"
                        },
                        new
                        {
                            Id = 2,
                            Description = "تطوير مواقع ويب باستخدام تقنيات مختلفة",
                            Title = "تطوير مواقع"
                        },
                        new
                        {
                            Id = 3,
                            Description = "خدمات كتابة وترجمة المقالات والمحتويات",
                            Title = "كتابة وترجمة"
                        },
                        new
                        {
                            Id = 4,
                            Description = "خدمات تحليل البيانات والاستشارات",
                            Title = "تحليل البيانات"
                        },
                        new
                        {
                            Id = 5,
                            Description = "خدمات التسويق الرقمي والترويج",
                            Title = "تسويق رقمي"
                        },
                        new
                        {
                            Id = 6,
                            Description = "تطوير تطبيقات الهواتف الذكية",
                            Title = "تطوير تطبيقات"
                        },
                        new
                        {
                            Id = 7,
                            Description = "خدمات إدارة المشاريع والتخطيط",
                            Title = "إدارة مشاريع"
                        },
                        new
                        {
                            Id = 8,
                            Description = "تسجيل صوتي ومونتاج",
                            Title = "خدمات صوتية"
                        },
                        new
                        {
                            Id = 9,
                            Description = "تقديم استشارات في مجال الأعمال",
                            Title = "استشارات أعمال"
                        },
                        new
                        {
                            Id = 10,
                            Description = "خدمات تصميم داخلي وديكور",
                            Title = "التصميم الداخلي"
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "مصر",
                            Description = "مستثمر في مجال التكنولوجيا.",
                            Image = "mohamed_ali.jpg",
                            Name = "محمد علي",
                            Phone = "0123456789",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3581)
                        },
                        new
                        {
                            Id = 2,
                            Country = "السعودية",
                            Description = "كاتبة ومحررة.",
                            Image = "alia_salem.jpg",
                            Name = "علياء سالم",
                            Phone = "0987654321",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3587)
                        },
                        new
                        {
                            Id = 3,
                            Country = "الإمارات",
                            Description = "مدير شركة ناشئة.",
                            Image = "khaled_youssef.jpg",
                            Name = "خالد يوسف",
                            Phone = "0123498765",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3592)
                        },
                        new
                        {
                            Id = 4,
                            Country = "الأردن",
                            Description = "مصممة جرافيك.",
                            Image = "laila_ahmed.jpg",
                            Name = "ليلى أحمد",
                            Phone = "0987123456",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3596)
                        },
                        new
                        {
                            Id = 5,
                            Country = "لبنان",
                            Description = "خبير في التسويق الرقمي.",
                            Image = "sami_hassan.jpg",
                            Name = "سامي حسن",
                            Phone = "0123987654",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3601)
                        },
                        new
                        {
                            Id = 6,
                            Country = "الكويت",
                            Description = "مستشارة أعمال.",
                            Image = "noura_abdelrahman.jpg",
                            Name = "نورة عبد الرحمن",
                            Phone = "0987123450",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3605)
                        },
                        new
                        {
                            Id = 7,
                            Country = "قطر",
                            Description = "محلل بيانات.",
                            Image = "faisal_bin_saeed.jpg",
                            Name = "فيصل بن سعيد",
                            Phone = "0123450987",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = 8,
                            Country = "البحرين",
                            Description = "مدير مشاريع.",
                            Image = "hussein_mohamed.jpg",
                            Name = "حسين محمد",
                            Phone = "0987650123",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3615)
                        },
                        new
                        {
                            Id = 9,
                            Country = "عمان",
                            Description = "كاتبة ومؤلفة.",
                            Image = "mona_ibrahim.jpg",
                            Name = "منى إبراهيم",
                            Phone = "0123987456",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3619)
                        },
                        new
                        {
                            Id = 10,
                            Country = "المغرب",
                            Description = "مطور ويب.",
                            Image = "tarek_abdullah.jpg",
                            Name = "طارق عبد الله",
                            Phone = "0987345612",
                            RegistrationTime = new DateTime(2024, 8, 27, 22, 24, 7, 267, DateTimeKind.Local).AddTicks(3624)
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Overview")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PersonalImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "شارع التكنولوجيا، الرياض",
                            Name = "يوسف أحمد",
                            Overview = "لدي خبرة 5 سنوات في تطوير الويب باستخدام .NET وJavaScript.",
                            PersonalImage = "yousef_ahmed.jpg",
                            Title = "مطور ويب"
                        },
                        new
                        {
                            Id = 2,
                            Address = "شارع الفن، جدة",
                            Name = "فاطمة خالد",
                            Overview = "متخصصة في تصميم الشعارات والهويات البصرية.",
                            PersonalImage = "fatima_khalid.jpg",
                            Title = "مصممة جرافيك"
                        },
                        new
                        {
                            Id = 3,
                            Address = "شارع اللغات، القاهرة",
                            Name = "عمر محمود",
                            Overview = "خبرة 10 سنوات في الترجمة من وإلى العربية والإنجليزية.",
                            PersonalImage = "omar_mahmoud.jpg",
                            Title = "مترجم محترف"
                        },
                        new
                        {
                            Id = 4,
                            Address = "شارع الأعمال، دبي",
                            Name = "سارة علي",
                            Overview = "خبيرة في تحليل البيانات باستخدام Excel وPython.",
                            PersonalImage = "sara_ali.jpg",
                            Title = "محللة بيانات"
                        },
                        new
                        {
                            Id = 5,
                            Address = "شارع التسويق، بيروت",
                            Name = "أحمد سليمان",
                            Overview = "محترف في إدارة الحملات الإعلانية الرقمية على وسائل التواصل الاجتماعي.",
                            PersonalImage = "ahmed_suleiman.jpg",
                            Title = "خبير تسويق رقمي"
                        },
                        new
                        {
                            Id = 6,
                            Address = "شارع البرمجة، الكويت",
                            Name = "سلمى نور",
                            Overview = "متخصصة في تطوير تطبيقات الهواتف الذكية لنظامي iOS وAndroid.",
                            PersonalImage = "salma_noor.jpg",
                            Title = "مطور تطبيقات"
                        },
                        new
                        {
                            Id = 7,
                            Address = "شارع الإدارة، الدوحة",
                            Name = "زياد عبد الله",
                            Overview = "مدير مشاريع معتمد مع خبرة في إدارة المشاريع التقنية.",
                            PersonalImage = "ziad_abdullah.jpg",
                            Title = "مدير مشاريع"
                        },
                        new
                        {
                            Id = 8,
                            Address = "شارع الصوت، المنامة",
                            Name = "هدى ياسين",
                            Overview = "لدي صوت مميز وخبرة في التسجيل الصوتي للإعلانات.",
                            PersonalImage = "huda_yaseen.jpg",
                            Title = "معلقة صوتية"
                        },
                        new
                        {
                            Id = 9,
                            Address = "شارع الاستشارات، مسقط",
                            Name = "مريم صالح",
                            Overview = "أقدم استشارات في مجال إدارة الأعمال وتطوير الشركات.",
                            PersonalImage = "maryam_saleh.jpg",
                            Title = "مستشارة أعمال"
                        },
                        new
                        {
                            Id = 10,
                            Address = "شارع التصميم، الرباط",
                            Name = "خالد حسن",
                            Overview = "محترف في تصميم الديكور الداخلي للمنازل والمكاتب.",
                            PersonalImage = "khaled_hassan.jpg",
                            Title = "مصمم داخلي"
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.FreelancerSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "FreelancerId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerSkills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            FreelancerId = 1
                        },
                        new
                        {
                            SkillId = 2,
                            FreelancerId = 2
                        },
                        new
                        {
                            SkillId = 3,
                            FreelancerId = 3
                        },
                        new
                        {
                            SkillId = 4,
                            FreelancerId = 4
                        },
                        new
                        {
                            SkillId = 5,
                            FreelancerId = 5
                        },
                        new
                        {
                            SkillId = 6,
                            FreelancerId = 6
                        },
                        new
                        {
                            SkillId = 7,
                            FreelancerId = 7
                        },
                        new
                        {
                            SkillId = 8,
                            FreelancerId = 8
                        },
                        new
                        {
                            SkillId = 9,
                            FreelancerId = 9
                        },
                        new
                        {
                            SkillId = 10,
                            FreelancerId = 10
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcceptedFreelancerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApproveTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinBudget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedFreelancerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ClientId = 1,
                            Description = "نحتاج لتصميم شعار جديد لشركتنا باستخدام تقنيات التصميم الحديثة.",
                            DurationInDays = 10,
                            ExperienceLevel = 0,
                            MaxBudget = 500m,
                            MinBudget = 100m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(622),
                            Status = 0,
                            Title = "تصميم شعار لشركة"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ClientId = 2,
                            Description = "تطوير موقع تجارة إلكترونية متكامل باللغتين العربية والإنجليزية.",
                            DurationInDays = 30,
                            ExperienceLevel = 1,
                            MaxBudget = 3000m,
                            MinBudget = 1500m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(657),
                            Status = 0,
                            Title = "تطوير موقع تجارة إلكترونية"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            ClientId = 3,
                            Description = "كتابة مقالات متوافقة مع محركات البحث (SEO) في مجال التكنولوجيا.",
                            DurationInDays = 7,
                            ExperienceLevel = 2,
                            MaxBudget = 800m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(662),
                            Status = 0,
                            Title = "كتابة مقالات للسيو"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            ClientId = 4,
                            Description = "تحليل بيانات السوق لإنشاء تقرير شامل عن الأداء المالي للشركة.",
                            DurationInDays = 15,
                            ExperienceLevel = 1,
                            MaxBudget = 1000m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(666),
                            Status = 0,
                            Title = "تحليل بيانات السوق"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            ClientId = 5,
                            Description = "إدارة حملة تسويقية رقمية على منصات التواصل الاجتماعي.",
                            DurationInDays = 20,
                            ExperienceLevel = 1,
                            MaxBudget = 2000m,
                            MinBudget = 1000m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(670),
                            Status = 0,
                            Title = "إدارة حملة تسويقية"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            ClientId = 6,
                            Description = "تطوير تطبيق جوال متكامل لمنصة iOS وأندرويد.",
                            DurationInDays = 45,
                            ExperienceLevel = 2,
                            MaxBudget = 5000m,
                            MinBudget = 2000m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(674),
                            Status = 0,
                            Title = "تطوير تطبيق جوال"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            ClientId = 7,
                            Description = "إدارة مشروع بناء موقع شركة مع تنسيق الفرق المختلفة.",
                            DurationInDays = 30,
                            ExperienceLevel = 2,
                            MaxBudget = 2500m,
                            MinBudget = 1200m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(677),
                            Status = 0,
                            Title = "إدارة مشروع بناء موقع"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            ClientId = 8,
                            Description = "تسجيل إعلان صوتي بجودة عالية لإذاعته على الراديو.",
                            DurationInDays = 5,
                            ExperienceLevel = 0,
                            MaxBudget = 600m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(682),
                            Status = 0,
                            Title = "تسجيل إعلان صوتي"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            ClientId = 9,
                            Description = "استشارة في استراتيجيات الأعمال لتحسين أداء الشركة.",
                            DurationInDays = 10,
                            ExperienceLevel = 1,
                            MaxBudget = 1500m,
                            MinBudget = 800m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(685),
                            Status = 0,
                            Title = "استشارة في استراتيجيات الأعمال"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            ClientId = 10,
                            Description = "تصميم داخلي لمقهى جديد بأسلوب عصري.",
                            DurationInDays = 25,
                            ExperienceLevel = 2,
                            MaxBudget = 3500m,
                            MinBudget = 1500m,
                            PostTime = new DateTime(2024, 8, 27, 22, 24, 7, 271, DateTimeKind.Local).AddTicks(689),
                            Status = 0,
                            Title = "تصميم داخلي لمقهى"
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.JobSkills", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            SkillId = 1
                        },
                        new
                        {
                            JobId = 2,
                            SkillId = 2
                        },
                        new
                        {
                            JobId = 3,
                            SkillId = 3
                        },
                        new
                        {
                            JobId = 4,
                            SkillId = 4
                        },
                        new
                        {
                            JobId = 5,
                            SkillId = 5
                        },
                        new
                        {
                            JobId = 6,
                            SkillId = 6
                        },
                        new
                        {
                            JobId = 7,
                            SkillId = 7
                        },
                        new
                        {
                            JobId = 8,
                            SkillId = 8
                        },
                        new
                        {
                            JobId = 9,
                            SkillId = 9
                        },
                        new
                        {
                            JobId = 10,
                            SkillId = 10
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationTriggerId")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Description = "تم قبول عرضك لتصميم الشعار.",
                            IsRead = false,
                            NotificationTriggerId = 1,
                            Reason = 1,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(960),
                            Title = "تم قبول عرضك"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Description = "عرضك لتطوير الموقع قد تم رفضه.",
                            IsRead = false,
                            NotificationTriggerId = 2,
                            Reason = 2,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(983),
                            Title = "تم رفض عرضك"
                        },
                        new
                        {
                            Id = 3,
                            Description = "لديك مهمة جديدة لتطوير موقع ويب.",
                            FreelancerId = 1,
                            IsRead = false,
                            NotificationTriggerId = 3,
                            Reason = 0,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(987),
                            Title = "مهمة جديدة"
                        },
                        new
                        {
                            Id = 4,
                            Description = "تم تغيير حالة المشروع الخاص بك.",
                            FreelancerId = 2,
                            IsRead = false,
                            NotificationTriggerId = 4,
                            Reason = 4,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(991),
                            Title = "تم تغيير حالة المشروع"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 3,
                            Description = "هناك عرض جديد متاح لمشروعك.",
                            IsRead = false,
                            NotificationTriggerId = 5,
                            Reason = 4,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(994),
                            Title = "عرض جديد متاح"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 4,
                            Description = "يرجى مراجعة المشروع المقدم.",
                            IsRead = false,
                            NotificationTriggerId = 6,
                            Reason = 0,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(997),
                            Title = "مراجعة المشروع"
                        },
                        new
                        {
                            Id = 7,
                            Description = "تم تحديث حالة المشروع الخاص بك.",
                            FreelancerId = 3,
                            IsRead = false,
                            NotificationTriggerId = 7,
                            Reason = 0,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(1000),
                            Title = "تحديث حالة المشروع"
                        },
                        new
                        {
                            Id = 8,
                            Description = "تمت الموافقة على عرضك لتحليل البيانات.",
                            FreelancerId = 4,
                            IsRead = false,
                            NotificationTriggerId = 8,
                            Reason = 1,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(1003),
                            Title = "تمت الموافقة على العرض"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 5,
                            Description = "تم تعيينك لإدارة حملة تسويقية.",
                            IsRead = false,
                            NotificationTriggerId = 9,
                            Reason = 4,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(1006),
                            Title = "تم تعيينك في المشروع"
                        },
                        new
                        {
                            Id = 10,
                            Description = "عرض جديد متاح لمشروع التصميم الداخلي.",
                            FreelancerId = 5,
                            IsRead = false,
                            NotificationTriggerId = 10,
                            Reason = 4,
                            SentTime = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(1009),
                            Title = "عرض جديد متاح"
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "تصميم وتطوير موقع ويب متكامل باستخدام أحدث التقنيات.",
                            FreelancerId = 1,
                            Images = "[\"web1.png\",\"web2.png\"]",
                            Link = "https://example.com/web_project",
                            Poster = "web_project.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4530),
                            Title = "مشروع ويب متكامل"
                        },
                        new
                        {
                            Id = 2,
                            Description = "تصميم شعار مبتكر لشركة ناشئة.",
                            FreelancerId = 2,
                            Images = "[\"logo1.png\",\"logo2.png\"]",
                            Link = "https://example.com/logo",
                            Poster = "creative_logo.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4540),
                            Title = "شعار إبداعي"
                        },
                        new
                        {
                            Id = 3,
                            Description = "كتابة مجموعة مقالات تقنية لموقع ويب.",
                            FreelancerId = 3,
                            Images = "[\"article1.png\",\"article2.png\"]",
                            Link = "https://example.com/articles",
                            Poster = "tech_articles.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4547),
                            Title = "مقالات تقنية"
                        },
                        new
                        {
                            Id = 4,
                            Description = "تحليل بيانات مبيعات شركة خلال العام الماضي.",
                            FreelancerId = 4,
                            Images = "[\"analysis1.png\",\"analysis2.png\"]",
                            Link = "https://example.com/analysis",
                            Poster = "sales_analysis.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4554),
                            Title = "تحليل بيانات المبيعات"
                        },
                        new
                        {
                            Id = 5,
                            Description = "إدارة حملة إعلانية لمتجر إلكتروني.",
                            FreelancerId = 5,
                            Images = "[\"campaign1.png\",\"campaign2.png\"]",
                            Link = "https://example.com/campaign",
                            Poster = "ad_campaign.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4618),
                            Title = "إدارة حملة إعلانية"
                        },
                        new
                        {
                            Id = 6,
                            Description = "تطوير تطبيق جوال لتتبع اللياقة البدنية.",
                            FreelancerId = 6,
                            Images = "[\"app1.png\",\"app2.png\"]",
                            Link = "https://example.com/app",
                            Poster = "mobile_app.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4627),
                            Title = "تطبيق جوال"
                        },
                        new
                        {
                            Id = 7,
                            Description = "إدارة مشروع بناء موقع إلكتروني.",
                            FreelancerId = 7,
                            Images = "[\"project1.png\",\"project2.png\"]",
                            Link = "https://example.com/project",
                            Poster = "project_management.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4633),
                            Title = "إدارة مشروع بناء"
                        },
                        new
                        {
                            Id = 8,
                            Description = "تسجيل صوتي لإعلان إذاعي.",
                            FreelancerId = 8,
                            Images = "[\"audio1.png\",\"audio2.png\"]",
                            Link = "https://example.com/audio",
                            Poster = "audio_recording.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4640),
                            Title = "تسجيل صوتي"
                        },
                        new
                        {
                            Id = 9,
                            Description = "تقديم استشارات أعمال لشركة صغيرة.",
                            FreelancerId = 9,
                            Images = "[\"consulting1.png\",\"consulting2.png\"]",
                            Link = "https://example.com/consulting",
                            Poster = "business_consulting.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4646),
                            Title = "استشارة أعمال"
                        },
                        new
                        {
                            Id = 10,
                            Description = "تصميم داخلي لمقهى بأسلوب عصري.",
                            FreelancerId = 10,
                            Images = "[\"design1.png\",\"design2.png\"]",
                            Link = "https://example.com/design",
                            Poster = "interior_design.png",
                            TimePublished = new DateTime(2024, 8, 27, 22, 24, 7, 272, DateTimeKind.Local).AddTicks(4652),
                            Title = "تصميم داخلي لمقهى"
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.ProjectSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSkills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            SkillId = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            SkillId = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            SkillId = 4,
                            ProjectId = 4
                        },
                        new
                        {
                            SkillId = 5,
                            ProjectId = 5
                        },
                        new
                        {
                            SkillId = 6,
                            ProjectId = 6
                        },
                        new
                        {
                            SkillId = 7,
                            ProjectId = 7
                        },
                        new
                        {
                            SkillId = 8,
                            ProjectId = 8
                        },
                        new
                        {
                            SkillId = 9,
                            ProjectId = 9
                        },
                        new
                        {
                            SkillId = 10,
                            ProjectId = 10
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("ReposLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeadLine = new DateTime(2024, 9, 6, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6494),
                            Description = "عرض لتصميم شعار مبتكر.",
                            Duration = 10.0,
                            FreelancerId = 1,
                            JobId = 1,
                            Price = 200m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DeadLine = new DateTime(2024, 9, 16, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6519),
                            Description = "عرض لتطوير موقع تجارة إلكترونية بميزات حديثة.",
                            Duration = 15.0,
                            FreelancerId = 2,
                            JobId = 2,
                            Price = 1500m,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DeadLine = new DateTime(2024, 9, 3, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6523),
                            Description = "عرض لكتابة مقالات تقنية بجودة عالية.",
                            Duration = 7.0,
                            FreelancerId = 3,
                            JobId = 3,
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            DeadLine = new DateTime(2024, 9, 11, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6526),
                            Description = "عرض لتحليل بيانات السوق بدقة.",
                            Duration = 15.0,
                            FreelancerId = 4,
                            JobId = 4,
                            Price = 800m,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            DeadLine = new DateTime(2024, 9, 16, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6529),
                            Description = "عرض لإدارة حملة تسويقية فعالة.",
                            Duration = 20.0,
                            FreelancerId = 5,
                            JobId = 5,
                            Price = 1200m,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            DeadLine = new DateTime(2024, 10, 11, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6533),
                            Description = "عرض لتطوير تطبيق جوال بميزات متقدمة.",
                            Duration = 40.0,
                            FreelancerId = 6,
                            JobId = 6,
                            Price = 3000m,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            DeadLine = new DateTime(2024, 9, 26, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6536),
                            Description = "عرض لإدارة مشروع بناء موقع ويب.",
                            Duration = 25.0,
                            FreelancerId = 7,
                            JobId = 7,
                            Price = 2000m,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            DeadLine = new DateTime(2024, 9, 1, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6539),
                            Description = "عرض لتسجيل إعلان صوتي بجودة احترافية.",
                            Duration = 3.0,
                            FreelancerId = 8,
                            JobId = 8,
                            Price = 400m,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            DeadLine = new DateTime(2024, 9, 6, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6542),
                            Description = "عرض لتقديم استشارة في استراتيجيات الأعمال.",
                            Duration = 10.0,
                            FreelancerId = 9,
                            JobId = 9,
                            Price = 1000m,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            DeadLine = new DateTime(2024, 9, 21, 22, 24, 7, 273, DateTimeKind.Local).AddTicks(6545),
                            Description = "عرض لتصميم داخلي لمقهى بأسلوب عصري.",
                            Duration = 20.0,
                            FreelancerId = 10,
                            JobId = 10,
                            Price = 2500m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.ToTable("Rates", t =>
                        {
                            t.HasCheckConstraint("CK_VALUE_RANGE", "[Value] BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Feedback = "خدمة ممتازة وسريعة.",
                            JobId = 1,
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            Feedback = "عمل جيد ولكن يحتاج لبعض التحسينات.",
                            JobId = 2,
                            Value = 4
                        },
                        new
                        {
                            Id = 3,
                            Feedback = "خدمة متوسطة، غير متوقعة.",
                            JobId = 3,
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            Feedback = "جيد ولكن يحتاج لتحسين.",
                            JobId = 4,
                            Value = 3
                        },
                        new
                        {
                            Id = 5,
                            Feedback = "عمل ممتاز وسريع.",
                            JobId = 5,
                            Value = 5
                        },
                        new
                        {
                            Id = 6,
                            Feedback = "مبدع ومحترف في العمل.",
                            JobId = 6,
                            Value = 5
                        },
                        new
                        {
                            Id = 7,
                            Feedback = "محترف في الإدارة ولكن الوقت كان أطول من المتوقع.",
                            JobId = 7,
                            Value = 4
                        },
                        new
                        {
                            Id = 8,
                            Feedback = "خدمة متوسطة، كان هناك بعض الأخطاء.",
                            JobId = 8,
                            Value = 3
                        },
                        new
                        {
                            Id = 9,
                            Feedback = "عمل ممتاز وتم تنفيذ المشروع كما هو مطلوب.",
                            JobId = 9,
                            Value = 5
                        },
                        new
                        {
                            Id = 10,
                            Feedback = "إبداع في التصميم الداخلي وتفاصيل رائعة.",
                            JobId = 10,
                            Value = 5
                        });
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "مهارات في تصميم الشعارات، البوسترات، والمواد البصرية.",
                            Title = "التصميم الجرافيكي"
                        },
                        new
                        {
                            Id = 2,
                            Description = "مهارات في تطوير مواقع الويب باستخدام HTML، CSS، JavaScript، و .NET.",
                            Title = "تطوير الويب"
                        },
                        new
                        {
                            Id = 3,
                            Description = "مهارات في كتابة المحتوى الإبداعي والمقالات.",
                            Title = "الكتابة الإبداعية"
                        },
                        new
                        {
                            Id = 4,
                            Description = "مهارات في تحليل البيانات باستخدام Excel وPython.",
                            Title = "تحليل البيانات"
                        },
                        new
                        {
                            Id = 5,
                            Description = "مهارات في إدارة الحملات التسويقية على وسائل التواصل الاجتماعي.",
                            Title = "التسويق الرقمي"
                        },
                        new
                        {
                            Id = 6,
                            Description = "مهارات في تطوير تطبيقات الهواتف الذكية لنظامي iOS وAndroid.",
                            Title = "تطوير التطبيقات"
                        },
                        new
                        {
                            Id = 7,
                            Description = "مهارات في إدارة المشاريع وتنسيق الفرق.",
                            Title = "إدارة المشاريع"
                        },
                        new
                        {
                            Id = 8,
                            Description = "مهارات في التعليق الصوتي والتسجيل الإذاعي.",
                            Title = "التعليق الصوتي"
                        },
                        new
                        {
                            Id = 9,
                            Description = "مهارات في تقديم الاستشارات الإدارية وتطوير الأعمال.",
                            Title = "الاستشارات الإدارية"
                        },
                        new
                        {
                            Id = 10,
                            Description = "مهارات في تصميم الديكور الداخلي للمنازل والمكاتب.",
                            Title = "التصميم الداخلي"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4149b340-716c-4518-9ab7-489ea2574ad1",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "156a12b2-d936-494c-af00-2572fb565509",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.ApplicationUser", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Admin", "Admin")
                        .WithOne("User")
                        .HasForeignKey("FreelancerApiProject.Data.Entities.ApplicationUser", "AdminId");

                    b.HasOne("FreelancerApiProject.Data.Entities.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("FreelancerApiProject.Data.Entities.ApplicationUser", "ClientId");

                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "Freelancer")
                        .WithOne("User")
                        .HasForeignKey("FreelancerApiProject.Data.Entities.ApplicationUser", "FreelancerId");

                    b.OwnsMany("FreelancerApiProject.Data.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("JwtToken")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.FreelancerSkills", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "Freelancer")
                        .WithMany("Skills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Skill", "Skill")
                        .WithMany("Freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Job", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "AcceptedFreelancer")
                        .WithMany()
                        .HasForeignKey("AcceptedFreelancerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreelancerApiProject.Data.Entities.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", null)
                        .WithMany("WorkingHistory")
                        .HasForeignKey("FreelancerId");

                    b.Navigation("AcceptedFreelancer");

                    b.Navigation("Category");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.JobSkills", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Job", "Job")
                        .WithMany("Skills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Skill", "Skill")
                        .WithMany("Jobs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Notification", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId");

                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "Freelancer")
                        .WithMany("Notifications")
                        .HasForeignKey("FreelancerId");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Project", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "Freelancer")
                        .WithMany("Portfolio")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.ProjectSkills", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Project", "Project")
                        .WithMany("Skills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Skill", "Skill")
                        .WithMany("Projects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Proposal", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Freelancer", "Freelancer")
                        .WithMany("Proposals")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.Job", "Job")
                        .WithMany("Proposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Rate", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.Job", "Job")
                        .WithOne("Rate")
                        .HasForeignKey("FreelancerApiProject.Data.Entities.Rate", "JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreelancerApiProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FreelancerApiProject.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Admin", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Freelancer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Portfolio");

                    b.Navigation("Proposals");

                    b.Navigation("Skills");

                    b.Navigation("User");

                    b.Navigation("WorkingHistory");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Job", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("Rate");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Project", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("FreelancerApiProject.Data.Entities.Skill", b =>
                {
                    b.Navigation("Freelancers");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
